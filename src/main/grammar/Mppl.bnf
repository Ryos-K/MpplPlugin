{
    parserClass="com.github.ryosk.mpplplugin.language.parser.MpplParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Mppl"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.ryosk.mpplplugin.language.psi"
    psiImplPackage="com.github.ryosk.mpplplugin.language.psi.impl"

    elementTypeHolderClass="com.github.ryosk.mpplplugin.language.psi.MpplTypes"
    elementTypeClass="com.github.ryosk.mpplplugin.language.psi.MpplElementType"
    tokenTypeClass="com.github.ryosk.mpplplugin.language.psi.MpplTokenType"

    psiImplUtilClass="com.github.ryosk.mpplplugin.language.psi.impl.MpplPsiImplUtil"
}

mpplFile               ::= root?

root                   ::= PROGRAM NAME SEMI block DOT

block                  ::= declaration* compoundStatement?

declaration            ::= variableDeclaration
                         | subprogramDeclaration { recoverWhile=declarationRecover }

declarationRecover     ::= !(VAR | PROCEDURE | BEGIN | DOT)

variableDeclaration    ::= VAR (variableNames COLON type SEMI)+ { pin=1 }

variableNames          ::= variableName (COMMA variableNames)*

variableName           ::= NAME {
    mixin="com.github.ryosk.mpplplugin.language.psi.impl.MpplNamedElementImpl"
    implements="com.github.ryosk.mpplplugin.language.psi.MpplNamedElement"
    methods=[getName setName getNameIdentifier]
}

type                   ::= standardType | arrayType

standardType           ::= INTEGER | BOOLEAN | CHAR

arrayType              ::= ARRAY LSQPAREN NUMBER RSQPAREN OF standardType

subprogramDeclaration  ::= PROCEDURE procedureName formalParameters? SEMI variableDeclaration? compoundStatement SEMI { pin=1 }

procedureName          ::= NAME {
    mixin="com.github.ryosk.mpplplugin.language.psi.impl.MpplNamedElementImpl"
    implements="com.github.ryosk.mpplplugin.language.psi.MpplNamedElement"
    methods=[getName setName getNameIdentifier]
}

formalParameters       ::= LPAREN variableNames COLON type (SEMI variableNames COLON type)* RPAREN

compoundStatement      ::= BEGIN statement (SEMI statement)* END { pin=1 }

statement              ::= assignmentStatement
                         | conditionStatement
                         | iterationStatement
                         | exitStatement
                         | callStatement
                         | returnStatement
                         | inputStatement
                         | outputStatement
                         | compoundStatement
                         | emptyStatement {
                         recoverWhile=statementRecover
                         }
statementRecover       ::= !(SEMI | END | DOT)

conditionStatement     ::= IF expression THEN statement (ELSE statement)?

iterationStatement     ::= WHILE expression DO statement

exitStatement          ::= BREAK

callStatement          ::= CALL procedureName (LPAREN expressions RPAREN)?

expressions            ::= expression (COMMA expression)*

returnStatement        ::= RETURN

assignmentStatement    ::= leftPart ASSIGN expression

leftPart               ::= variable

variable               ::= variableName (LSQPAREN expression RSQPAREN)?

expression             ::= simpleExpression (relationalOperator simpleExpression)*

simpleExpression       ::= (PLUS | MINUS)? term (additiveOperator term)*

term                   ::= factor (multiplicativeOperator factor)*

factor                 ::= variable | constant | LPAREN expression RPAREN | NOT factor | standardType LPAREN expression RPAREN

constant               ::= NUMBER | FALSE | TRUE | STRING

multiplicativeOperator ::= STAR | DIV | AND

additiveOperator       ::= PLUS | MINUS | OR

relationalOperator     ::= EQUAL | NOTEQ | LE | LEEQ | GR | GREQ

inputStatement         ::= (READ | READLN) (LPAREN variable (COMMA variable)* RPAREN)?

outputStatement        ::= (WRITE | WRITELN) (LPAREN outputFormat (COMMA outputFormat)* RPAREN)?

outputFormat           ::= expression (COLON NUMBER)? | STRING

emptyStatement         ::= COMMENT?







